# Copyright (C) 2009, Parrot Foundation.

## arguments we want to run parrot with
PARROT_ARGS   :=

## configuration settings
VERSION       := @versiondir@
BIN_DIR       := @bindir@
LIB_DIR       := @libdir@$(VERSION)
DOC_DIR       := @docdir@$(VERSION)
MANDIR        := @mandir@$(VERSION)

# Various paths
PERL6GRAMMAR  := $(LIB_DIR)/library/PGE/Perl6Grammar.pbc
NQP           := $(LIB_DIR)/languages/nqp/nqp.pbc
PCT           := $(LIB_DIR)/library/PCT.pbc

## Setup some commands
MAKE          := @make_c@
PERL          := @perl@
CAT           := @cat@
CHMOD         := @chmod@
CP            := @cp@
MKPATH        := @mkpath@
RM_F          := @rm_f@
RM_RF         := @rm_rf@
POD2MAN       := pod2man
#IF(parrot_is_shared and not(cygwin or win32)):export LD_RUN_PATH := @blib_dir@:$(LD_RUN_PATH)
PARROT        := $(BIN_DIR)/parrot@exe@
#IF(darwin):
#IF(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
#IF(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@

SAX_XML_SOURCES := \
  sax/xml/gen_grammar.pir \
  sax/xml/gen_actions.pir \
  sax/xml/gen_builtins.pir \
  sax/xml/xml.pir

SAX_XML_BUILTINS_PIR := \
  sax/xml/builtins/char_ref.pir \
  sax/xml/builtins/fire.pir \
  sax/xml/builtins/normalize.pir

HANDLER_XMLWRITER_SOURCES := \
  handler/xmlwriter/gen_actions.pir \
  handler/xmlwriter/gen_builtins.pir \
  handler/xmlwriter/xmlwriter.pir

HANDLER_XMLWRITER_BUILTINS_PIR := \
  handler/xmlwriter/builtins/escape.pir \
  handler/xmlwriter/builtins/print.pir \
  handler/xmlwriter/builtins/throw.pir

DOCS := README

BUILD_CLEANUPS := \
  "sax/xml/*.pbc" \
  "sax/xml/gen_*.pir" \
  "handler/xmlwriter/*.pbc" \
  "handler/xmlwriter/gen_*.pir" \
  "*.pbc" \
#IF(win32):  parrot-xml.iss \
#IF(win32):  "setup-parrot-*.exe" \

TEST_CLEANUPS := \
  "t/*.xml" \
  "t/*.out"

# the default target
build: xml.pbc sax/xml/xml.pbc handler/xmlwriter/xmlwriter.pbc

all: build

xml.pbc: xml.pir
	$(PARROT) $(PARROT_ARGS) -o xml.pbc xml.pir

sax/xml/xml.pbc: $(SAX_XML_SOURCES)
	$(PARROT) $(PARROT_ARGS) -o sax/xml/xml.pbc sax/xml/xml.pir

sax/xml/gen_grammar.pir: $(PERL6GRAMMAR) sax/xml/pct/grammar.pg
	$(PARROT) $(PARROT_ARGS) $(PERL6GRAMMAR) \
	    --output=sax/xml/gen_grammar.pir \
	    sax/xml/pct/grammar.pg

sax/xml/gen_actions.pir: $(NQP) sax/xml/pct/actions.pm
	$(PARROT) $(PARROT_ARGS) $(NQP) --output=sax/xml/gen_actions.pir \
	    --target=pir sax/xml/pct/actions.pm

sax/xml/gen_builtins.pir: $(SAX_XML_BUILTINS_PIR)
	$(CAT) $(SAX_XML_BUILTINS_PIR) > sax/xml/gen_builtins.pir

handler/xmlwriter/xmlwriter.pbc: $(HANDLER_XMLWRITER_SOURCES)
	$(PARROT) $(PARROT_ARGS) -o handler/xmlwriter/xmlwriter.pbc handler/xmlwriter/xmlwriter.pir

handler/xmlwriter/gen_actions.pir: $(NQP) handler/xmlwriter/pct/actions.pm
	$(PARROT) $(PARROT_ARGS) $(NQP) --output=handler/xmlwriter/gen_actions.pir \
	    --target=pir handler/xmlwriter/pct/actions.pm

handler/xmlwriter/gen_builtins.pir: $(HANDLER_XMLWRITER_BUILTINS_PIR)
	$(CAT) $(HANDLER_XMLWRITER_BUILTINS_PIR) > handler/xmlwriter/gen_builtins.pir

Makefile: build/Makefile.in
	$(PERL) Configure.pl

# This is a listing of all targets, that are meant to be called by users
help:
	@echo ""
	@echo "Following targets are available for the user:"
	@echo ""
	@echo "  build:             xml.pbc xmlwriter.pbc"
	@echo "                     This is the default."
	@echo "  all:               xml.pbc xmlwriter.pbc"
	@echo ""
	@echo "Testing:"
	@echo "  test:              Run the test suite."
	@echo "  testclean:         Clean up test results."
	@echo ""
	@echo "Cleaning:"
	@echo "  clean:             Basic cleaning up."
	@echo "  realclean:         Removes also files generated by 'Configure.pl'"
	@echo "  distclean:         Removes also anything built, in theory"
	@echo ""
	@echo "Misc:"
	@echo "  help:              Print this help message."
	@echo ""

test: build
	$(PERL) -I$(LIB_DIR)/tools/lib t/harness

install:
	-$(MKPATH) $(LIB_DIR)/languages/xml
	$(CP) xml.pbc $(LIB_DIR)/languages/xml/xml.pbc

uninstall:
	$(RM_RF) $(LIB_DIR)/languages/xml

testclean:
	$(RM_F) $(TEST_CLEANUPS)

clean:
	$(RM_F) $(TEST_CLEANUPS) $(BUILD_CLEANUPS)

realclean:
	$(RM_F) $(TEST_CLEANUPS) $(BUILD_CLEANUPS) Makefile

distclean: realclean

# Local variables:
#   mode: makefile
# End:
# vim: ft=make:

