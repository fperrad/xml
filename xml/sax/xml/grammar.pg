# Copyright (C) 2009, Parrot Foundation.

#
# This is the grammar for Xml written as a sequence of Perl 6 rules.
#
# See Extensible Markup Language (XML) 1.0,
# http://www.w3.org/TR/2000/REC-xml-20001006
#

grammar Xml::Sax::Xml::Grammar is PCT::Grammar;

# 2.    Documents
# 2.1.  Well-Formed XML Documents

token TOP {
    ^ <document>
    [ $ || <panic: 'Syntax error'> ]
    {*}
}

# 1
token document {
    {*}                         #= start_document
    <prolog> <element> <Misc>*
    {*}                         #= end_document
}

# 2.2.  Characters

# 2
token Char {
    <[\x9\xA\xD\x20..\xFF]>
}

# 2.3.  Common Syntactic Constructs

# 3
token S {
    <[\x20\x9\xD\xA]>+
}

# 4
token NameChar {
    <[\x41..\x5A\x61..\x7A\xC0..\xD6\xD8..\xF6\xF8..\xFF\x30..\x39.\-_:\xB7]>
}

# 5
token Name {
    <[\x41..\x5A\x61..\x7A\xC0..\xD6\xD8..\xF6\xF8..\xFF_:]> <.NameChar>*
}

# 6
token Names {
    <Name> [ <.S> <Name> ]*
}

# 7
token Nmtoken {
    <NameChar>+
}

# 8
token Nmtokens {
    <Nmtoken> [ <.S> <Nmtoken> ]*
}

# 9
token EntityValue {
    {*}                         #= start_value
    [ \" ( [ <-[%&"]> | <PEReference> | <Reference> ]* ) \"
    | \' ( [ <-[%&']> | <PEReference> | <Reference> ]* ) \'
    ]
    {*}                         #= end_value
}

# 10
token AttValue {
    {*}                         #= start_value
    [ \" ( [ <-[<&"]> | <Reference> ]* ) \"
    | \' ( [ <-[<&']> | <Reference> ]* ) \'
    ]
    {*}                         #= end_value
}

# 11
token SystemLiteral {
      \" ( <-["]>* ) \"
    | \' ( <-[']>* ) \'
}

# 12
token PubidLiteral {
      \" ( <[a..zA..Z0..9\x20\xD\xA\-'()+,./:=?;!*#@$_%]>* ) \"
    | \' ( <[a..zA..Z0..9\x20\xD\xA\-()+,./:=?;!*#@$_%]>* ) \'
}

# 2.4.  Character Data and Markup

# 14
token CharData {
    [ <!CDEnd> <-[<&]> ] *
    {*}
}

# 2.5.  Comments

# 15
token Comment {
    '<!--' ( [ <!_hyphen> <.Char> | '-' [ <!_hyphen> <.Char> ] ]* ) '-->'
    {*}
}

token _hyphen {
    '-'
}

# 2.6.  Processing Instruction

# 16
token PI {
    '<?' <PITarget> [ <.S> $<Data>=[ <!_PI> <.Char> ]* ]? '?>'
    {*}
}

token _PI { '?>' }

# 17
token PITarget {
    <!_xml> <.Name>
}

token _xml { <[Xx]> <[Mm]> <[Ll]> }

# 2.7.  CDATA Sections

# 18
token CDSect {
    '<![CDATA[' <CData> <.CDEnd>
    {*}
}

# 20
token CData {
    [ <!CDEnd> <.Char> ]*
}

# 21
token CDEnd {
    ']]>'
}

# 2.8.  Prolog and Document Type Declaration

# 22
token prolog {
    <XMLDecl>? <Misc>* [ <doctypedecl> <Misc>* ]?
}

# 23
token XMLDecl {
    '<?xml' <VersionInfo> <EncodingDecl>? <SDDecl>? <.S>? '?>'
    {*}
}

# 24
token VersionInfo {
    <.S> version <.Eq> [ \' <VersionNum> \' | \" <VersionNum> \" ]
}

# 25
token Eq {
    <.S>? '=' <.S>?
}

# 26
token VersionNum {
    <[a..zA..Z0..9_.:\-]>+
}

# 27
token Misc {
    <Comment> | <PI> | <.S>
}

# 28
token doctypedecl {
    '<!DOCTYPE' <.S> <Name> [ <.S> <ExternalID> ]? <.S>?
    {*}                         #= start_dtd
    [ '[' [ <markupdecl> | <DeclSep> ]* ']' <.S>? ]? '>'
    {*}                         #= end_dtd
}

# 28a
token DeclSep {
    <PEReference> | <.S>
}

# 29
token markupdecl {
      <elementdecl>
    | <AttlistDecl>
    | <EntityDecl>
    | <NotationDecl>
    | <PI>
    | <Comment>
}

# 30
token extSubset {
    <TextDecl>? <extSubsetDecl>
}

# 31
token extSubsetDecl {
    [ <markupdecl> | <conditionalSect> | <DeclSep> ]*
}

# 2.9.  Standalone Document Declaration

# 32
token SDDecl {
    <.S> standalone <.Eq> [ \' <_yes_no> \' | \" <_yes_no> \" ]
}

token _yes_no {
    [yes|no]
}

# 3.    Logical Structures

# 39
token element {
      <EmptyElemTag>
    | <STag> <content> <ETag>
}

# 3.1.  Start-Tags, End-Tags, and Empty-Element Tags

# 40
token STag {
    '<' <Name> [ <.S> <Attribute> ]* <.S>? '>'
    {*}
}

# 41
token Attribute {
    <Name> <.Eq> <AttValue>
}

# 42
token ETag {
    '</' <Name> <.S>? '>'
    {*}
}

# 43
token content {
    <CharData>? [ [ <element> | <Reference> | <CDSect> | <PI> | <Comment> ] <CharData>? ]*
}

# 44
token EmptyElemTag {
    '<' <Name> [ <.S> <Attribute> ]* <.S>? '/>'
    {*}
}

# 3.2.  Element Type Declarations

# 45
token elementdecl {
    '<!ELEMENT' <.S> <Name> <.S> <contentspec> <.S>? '>'
    {*}
}

# 46
token contentspec {
    'EMPTY' | 'ANY' | <Mixed> | <children>
}

# 47
token children {
    [ <choice> | <seq> ] <[?*+]>?
}

# 48
token cp {
    [ <Name> | <choice> | <seq> ] <[?*+]>?
}

# 49
token choice {
    '(' <.S>? <cp> [ <.S>? '|' <.S>? <cp> ]+ <.S>? ')'
}

# 50
token seq {
    '(' <.S>? <cp> [ <.S>? ',' <.S>? <cp> ]* <.S>? ')'
}

# 51
token Mixed {
      '(' <.S>? '#PCDATA' [ <.S>? '|' <.S>? <Name> ]* <.S>? ')*'
    | '(' <.S>? '#PCDATA' <.S>? ')'
}

# 3.3.  Attribute-List Declarations

# 52
token AttlistDecl {
    '<!ATTLIST' <.S> <Name> <AttDef>* <.S>? '>'
    {*}
}

# 53
token AttDef {
    <.S> <Name> <.S> <AttType> <.S> <DefaultDecl>
}

# 54
token AttType {
    <StringType> | <TokenizedType> | <EnumeratedType>
}

# 55
token StringType {
    'CDATA'
}

# 56
token TokenizedType {
    'ID' | 'IDREF' | 'IDREFS' | 'ENTITY' | 'ENTITIES' | 'NMTOKEN' | 'NMTOKENS'
}

# 57
token EnumeratedType {
    <NotationType> | <Enumeration>
}

# 58
token NotationType {
    'NOTATION' <.S> '(' <.S>? <Name> [ <.S>? '|' <.S>? <Name> ]* <.S>? ')'
}

# 59
token Enumeration {
    '(' <.S>? <Nmtoken> [ <.S>? '|' <.S>? <Nmtoken> ]* <.S>? ')'
}

# 60
token DefaultDecl {
    '#REQUIRED' | '#IMPLIED' | [ ( '#FIXED' ) <.S> ]? <AttValue>
}

# 3.4.  Conditional Sections

# 61
token conditionalSect {
    <includeSect> | <ignoreSect>
}

# 62
token includeSect {
    '<![' <.S>? 'INCLUDE' <.S>? '[' <extSubsetDecl> ']]>'
}

# 63
token ignoreSect {
    '<![' <.S>? 'IGNORE' <.S>? '[' <ignoreSectContents>* ']]>'
}

# 64
token ignoreSectContents {
    <Ignore> [ '<![' <ignoreSectContents> ']]>' <Ignore> ]*
}

# 65
token Ignore {
    [ <!_Ignore> <Char> ]*
}

token _Ignore {
    '<![' | ']]>'
}

# 4.    Physical Structures
# 4.1.  Character and Entity References

# 66
token CharRef {
      '&#' ( <[0..9]>+ ) ';' {*}                #= dec
    | '&#x' ( <[0..9a..fA..F]>+ ) ';' {*}       #= hex
}

# 67
token Reference {
    <EntityRef> | <CharRef>
}

# 68
token EntityRef {
    '&' <Name> ';'
    {*}
}

# 69
token PEReference {
    '%' <Name> ';'
}

# 4.2.  Entity Declarations

# 70
token EntityDecl {
    <GEDecl> | <PEDecl>
}

# 71
token GEDecl {
    '<!ENTITY' <.S> <Name> <.S> <EntityDef> <.S>? '>'
    {*}
}

# 72
token PEDecl {
    '<!ENTITY' <.S> '%' <.S> <Name> <.S> <PEDef> <.S>? '>'
    {*}
}

# 73
token EntityDef {
    <EntityValue> | <ExternalID> <NDataDecl>?
}

# 74
token PEDef {
    <EntityValue> | <ExternalID>
}

# 75
token ExternalID {
      'SYSTEM' <.S> <SystemLiteral>
    | 'PUBLIC' <.S> <PubidLiteral> <.S> <SystemLiteral>
}

# 76
token NDataDecl {
    <.S> 'NDATA' <.S> <Name>
}

# 4.3.  Parsed Entities

# 77
token TextDecl {
    '<?xml' <VersionInfo>? <EncodingDecl> <S>? '?>'
}

# 78
token extParsedEnt {
    <TextDecl>? <content>
}

# 80
token EncodingDecl {
    <.S> encoding <.Eq> [ \" <EncName> \" | \' <EncName> \' ]
}

# 81
token EncName {
    <[A..Za..z]> <[A..Za..z0..9._\-]>*
}

# 4.7.  Notation Declarations

# 82
token NotationDecl {
    '<!NOTATION' <.S> <Name> <.S> <_NotationID> <.S>? '>'
    {*}
}

token _NotationID {
      'SYSTEM' <.S> <SystemLiteral>
    | 'PUBLIC' <.S> <PubidLiteral> <.S> <SystemLiteral>
    | 'PUBLIC' <.S> <PubidLiteral>
}
